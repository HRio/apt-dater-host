#!/bin/sh

# apt-dater - terminal-based remote package update manager
#
# Implementation of the protocol described in
#   https://github.com/DE-IBH/apt-dater-host/blob/master/doc/ADP-0.7
# using Busybox ash, awk and sed for use with Alpine Linux
#
# Author:
#   Henrik Riomar <henrik.riomar@gmail.com>
#
# Copyright Holder:
#   2016 (C) Henrik Riomar
#
# License:
#   This program is free software; you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation; either version 2 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this package; if not, write to the Free Software
#   Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301 USA
#

ADP_VERSION="0.7"
ROOT_CMD="sudo"
APK_CMD="/sbin/apk"

err=255 # exit code returned by perl from die()

# LSBREL: ${Distri}|{Version}|${Codename}
get_lsbrel()
{
	name=$(awk -F= '/^ID/ {print $NF}' /etc/os-release)
	version=$(awk -F= '/^VERSION_ID/ {print $NF}' /etc/os-release)
	echo "LSBREL: ${name}|${version}|"
}

# check if a pkg is held back
is_held()
{
	egrep -q ^$1\= /etc/apk/world
}

# STATUS: ${Package}|${InstVersion}|${Status}...
get_pkg_stat()
{
	tmp=$(mktemp)
	$APK_CMD version -v | grep -v "^Installed:" > $tmp
	$APK_CMD info | while read -r pkg
	do
		line=$(grep -E "^${pkg}-[0-9]" $tmp)
		new_ver=$(echo $line | awk '{print $NF}')
		cur_ver=$(echo $line | awk '{print $1}' | sed "s/$pkg-//")
		if [ $new_ver = $cur_ver ]; then
			echo "STATUS: $pkg|$cur_ver|i"
		elif is_held $pkg; then
			echo "STATUS: $pkg|$cur_ver|h"
		else
			echo "STATUS: $pkg|$cur_ver|u=$new_ver"
		fi
	done
	rm $tmp
}

# VIRT: ${Name}
get_virt()
{
	virt=$(dmesg | awk '/Hypervisor detected:/ {print $NF}')
	if [ -n "$virt" ]; then
		echo "VIRT: $virt"
	else
		echo "VIRT: Unknown"
	fi
}

# UNAME: ${KERNEL-NAME}|${MACHINE}
get_uname()
{
	echo "UNAME: $(uname -s)|$(uname -m)"
}

# KERNELINFO: ${Code} ${Release}
get_kern()
{
	# 9 - Unknown
	echo "KERNELINFO: 9 $(uname -r)"
}

# FORBID: ${Operations}
check_forbid()
{
	echo "FORBID: 0"
}

#  ADPROTO: ${ProtoVersion}
say_hi()
{
	echo "ADPROTO: $ADP_VERSION"
}

do_status()
{
	get_lsbrel
	get_virt
	get_uname
	check_forbid
	get_pkg_stat
	get_kern
}

run_as_root()
{
	err_str="ADPERR:"
	interactive=$1
	[ $interactive -eq 1 ] && err_str="ERROR:"
	shift

	proxy="/etc/profile.d/proxy.sh"
	[ -r $proxy ] && source $proxy

	cmd="$ROOT_CMD $*"
	$cmd
	ret=$?
	if [ $ret -ne 0 ]; then
		echo "$err_str \"$cmd\" returned $ret"
		exit $err
	fi
}


if [ -z "$1" ]; then
	echo "Don't call this script directly!"
	exit $err
fi

case "$1" in
	refresh)
		say_hi
		run_as_root 0 $APK_CMD update
		do_status
		;;

	status)
		say_hi
		do_status
		;;

	upgrade)
		run_as_root 1 $APK_CMD upgrade
		;;

	install)
		shift
		echo "Installing PKG: $*"
		run_as_root 1 $APK_CMD add $*
		;;

	kernel)
		say_hi
		get_kern
		;;

	*)
		echo Invalid command \'$1\'\!
		exit $err
		;;
esac
